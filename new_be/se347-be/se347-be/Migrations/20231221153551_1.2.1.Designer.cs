// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using se347_be.Model;

#nullable disable

namespace se347_be.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231221153551_1.2.1")]
    partial class _121
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("se347_be.Model.SqlAddress", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("dia_chi_detail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("dia_chi_mac_dinh")
                        .HasColumnType("boolean");

                    b.Property<string>("ho_va_ten")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("phuong_xa")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("quan_huyen")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("so_dien_thoai")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("tinh_thanh_pho")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("userID");

                    b.ToTable("tb_address");
                });

            modelBuilder.Entity("se347_be.Model.SqlCart", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("modified_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("shopID")
                        .HasColumnType("bigint");

                    b.Property<long?>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("shopID");

                    b.HasIndex("userID");

                    b.ToTable("tb_cart");
                });

            modelBuilder.Entity("se347_be.Model.SqlCartItem", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("cartID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("create_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("modified_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("option")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("orderID")
                        .HasColumnType("bigint");

                    b.Property<long>("productID")
                        .HasColumnType("bigint");

                    b.Property<int>("quantity")
                        .HasColumnType("integer");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("cartID");

                    b.HasIndex("orderID");

                    b.HasIndex("productID");

                    b.ToTable("tb_cartItem");
                });

            modelBuilder.Entity("se347_be.Model.SqlCategory", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_category");
                });

            modelBuilder.Entity("se347_be.Model.SqlConversation", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<bool>("is_seen")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("last_time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("shopID")
                        .HasColumnType("bigint");

                    b.Property<long>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("shopID");

                    b.HasIndex("userID");

                    b.ToTable("tb_conversation");
                });

            modelBuilder.Entity("se347_be.Model.SqlMessage", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("conversationID")
                        .HasColumnType("bigint");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("type")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("conversationID");

                    b.ToTable("tb_message");
                });

            modelBuilder.Entity("se347_be.Model.SqlNoti", b =>
                {
                    b.Property<long>("noti_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("noti_ID"));

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("id_routing")
                        .HasColumnType("text");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("isSeen")
                        .HasColumnType("boolean");

                    b.Property<long?>("shopID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("time_Sent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("time_seen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("type_receiver")
                        .HasColumnType("boolean");

                    b.Property<string>("type_routing")
                        .HasColumnType("text");

                    b.Property<long?>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("noti_ID");

                    b.HasIndex("shopID");

                    b.HasIndex("userID");

                    b.ToTable("tb_noti");
                });

            modelBuilder.Entity("se347_be.Model.SqlOrder", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("list_cart_item")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("payment_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("shopID")
                        .HasColumnType("bigint");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("userID")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("vouchers")
                        .HasColumnType("text[]");

                    b.HasKey("ID");

                    b.HasIndex("shopID");

                    b.HasIndex("userID");

                    b.ToTable("tb_order");
                });

            modelBuilder.Entity("se347_be.Model.SqlProduct", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("categoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("detail")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("discount")
                        .HasColumnType("integer");

                    b.Property<int>("inventory")
                        .HasColumnType("integer");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("options")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("productImage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("productListImage")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("productName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("productPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("productSalePrice")
                        .HasColumnType("bigint");

                    b.Property<List<string>>("productVideos")
                        .HasColumnType("text[]");

                    b.Property<float>("rating")
                        .HasColumnType("real");

                    b.Property<long>("shopID")
                        .HasColumnType("bigint");

                    b.Property<int>("sold")
                        .HasColumnType("integer");

                    b.Property<int>("status")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("categoryID");

                    b.HasIndex("shopID");

                    b.ToTable("tb_product");
                });

            modelBuilder.Entity("se347_be.Model.SqlReview", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long>("cart_itemID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<List<string>>("list_imgs")
                        .HasColumnType("text[]");

                    b.Property<string>("option")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("productID")
                        .HasColumnType("bigint");

                    b.Property<double>("rating")
                        .HasColumnType("double precision");

                    b.Property<long>("userID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("cart_itemID");

                    b.HasIndex("productID");

                    b.HasIndex("userID");

                    b.ToTable("tb_review");
                });

            modelBuilder.Entity("se347_be.Model.SqlShop", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long?>("SqlUserID")
                        .HasColumnType("bigint");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("rating")
                        .HasColumnType("double precision");

                    b.Property<long>("so_nguoi_danh_gia")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("SqlUserID");

                    b.ToTable("tb_shop");
                });

            modelBuilder.Entity("se347_be.Model.SqlUser", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("tb_user");
                });

            modelBuilder.Entity("se347_be.Model.SqlVoucher", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ID"));

                    b.Property<long?>("SqlUserID")
                        .HasColumnType("bigint");

                    b.Property<int>("discountAmount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("expire_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("isDeleted")
                        .HasColumnType("boolean");

                    b.Property<List<string>>("list_product_applied")
                        .HasColumnType("text[]");

                    b.Property<List<string>>("list_user_applied")
                        .HasColumnType("text[]");

                    b.Property<long>("minimum_order_price")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("public_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("shopID")
                        .HasColumnType("bigint");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("type")
                        .HasColumnType("boolean");

                    b.HasKey("ID");

                    b.HasIndex("SqlUserID");

                    b.HasIndex("shopID");

                    b.ToTable("tb_voucher");
                });

            modelBuilder.Entity("se347_be.Model.SqlAddress", b =>
                {
                    b.HasOne("se347_be.Model.SqlUser", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("se347_be.Model.SqlCart", b =>
                {
                    b.HasOne("se347_be.Model.SqlShop", "shop")
                        .WithMany()
                        .HasForeignKey("shopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("se347_be.Model.SqlUser", "user")
                        .WithMany()
                        .HasForeignKey("userID");

                    b.Navigation("shop");

                    b.Navigation("user");
                });

            modelBuilder.Entity("se347_be.Model.SqlCartItem", b =>
                {
                    b.HasOne("se347_be.Model.SqlCart", "cart")
                        .WithMany("cart_items")
                        .HasForeignKey("cartID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("se347_be.Model.SqlOrder", "order")
                        .WithMany()
                        .HasForeignKey("orderID");

                    b.HasOne("se347_be.Model.SqlProduct", "product")
                        .WithMany()
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart");

                    b.Navigation("order");

                    b.Navigation("product");
                });

            modelBuilder.Entity("se347_be.Model.SqlConversation", b =>
                {
                    b.HasOne("se347_be.Model.SqlShop", "shop")
                        .WithMany("conversations")
                        .HasForeignKey("shopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("se347_be.Model.SqlUser", "user")
                        .WithMany("conversations")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shop");

                    b.Navigation("user");
                });

            modelBuilder.Entity("se347_be.Model.SqlMessage", b =>
                {
                    b.HasOne("se347_be.Model.SqlConversation", "conversation")
                        .WithMany("messages")
                        .HasForeignKey("conversationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("conversation");
                });

            modelBuilder.Entity("se347_be.Model.SqlNoti", b =>
                {
                    b.HasOne("se347_be.Model.SqlShop", "shop")
                        .WithMany("notis")
                        .HasForeignKey("shopID");

                    b.HasOne("se347_be.Model.SqlUser", "user")
                        .WithMany("notis")
                        .HasForeignKey("userID");

                    b.Navigation("shop");

                    b.Navigation("user");
                });

            modelBuilder.Entity("se347_be.Model.SqlOrder", b =>
                {
                    b.HasOne("se347_be.Model.SqlShop", "shop")
                        .WithMany()
                        .HasForeignKey("shopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("se347_be.Model.SqlUser", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shop");

                    b.Navigation("user");
                });

            modelBuilder.Entity("se347_be.Model.SqlProduct", b =>
                {
                    b.HasOne("se347_be.Model.SqlCategory", "category")
                        .WithMany("products")
                        .HasForeignKey("categoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("se347_be.Model.SqlShop", "shop")
                        .WithMany("products")
                        .HasForeignKey("shopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");

                    b.Navigation("shop");
                });

            modelBuilder.Entity("se347_be.Model.SqlReview", b =>
                {
                    b.HasOne("se347_be.Model.SqlCartItem", "cart_item")
                        .WithMany()
                        .HasForeignKey("cart_itemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("se347_be.Model.SqlProduct", "product")
                        .WithMany("reviews")
                        .HasForeignKey("productID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("se347_be.Model.SqlUser", "user")
                        .WithMany()
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("cart_item");

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("se347_be.Model.SqlShop", b =>
                {
                    b.HasOne("se347_be.Model.SqlUser", null)
                        .WithMany("shops")
                        .HasForeignKey("SqlUserID");
                });

            modelBuilder.Entity("se347_be.Model.SqlVoucher", b =>
                {
                    b.HasOne("se347_be.Model.SqlUser", null)
                        .WithMany("vouchers")
                        .HasForeignKey("SqlUserID");

                    b.HasOne("se347_be.Model.SqlShop", "shop")
                        .WithMany("vouchers")
                        .HasForeignKey("shopID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("shop");
                });

            modelBuilder.Entity("se347_be.Model.SqlCart", b =>
                {
                    b.Navigation("cart_items");
                });

            modelBuilder.Entity("se347_be.Model.SqlCategory", b =>
                {
                    b.Navigation("products");
                });

            modelBuilder.Entity("se347_be.Model.SqlConversation", b =>
                {
                    b.Navigation("messages");
                });

            modelBuilder.Entity("se347_be.Model.SqlProduct", b =>
                {
                    b.Navigation("reviews");
                });

            modelBuilder.Entity("se347_be.Model.SqlShop", b =>
                {
                    b.Navigation("conversations");

                    b.Navigation("notis");

                    b.Navigation("products");

                    b.Navigation("vouchers");
                });

            modelBuilder.Entity("se347_be.Model.SqlUser", b =>
                {
                    b.Navigation("conversations");

                    b.Navigation("notis");

                    b.Navigation("shops");

                    b.Navigation("vouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
